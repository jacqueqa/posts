# Desafio de Testes em API Pet Shop: Como Meu C√©rebro Funciona

** Ol√°, mundo, h√° quanto tempo :) **

Bem, estou de volta para trazer algumas informa√ß√µes legais para novos QAs em sua jornada ou, por que n√£o, para QAs que j√° est√£o no mercado h√° muito tempo e precisam de um conte√∫do novo.  

Veja, n√£o estou aqui para dizer que QA est√° morrendo e que a IA vai roubar nossos empregos, nem para ensinar como fazer o seu trabalho. Este artigo √© apenas a minha mente compartilhando conhecimento para trazer clareza √† comunidade.  

Ent√£o, vamos ao que realmente importa:  

---

## O Projeto

Como QA h√≠brido, √†s vezes voc√™ passa a maior parte do seu tempo de trabalho fazendo coisas como: escrever testes, estudar requisitos, reuni√µes, reuni√µes, reuni√µes, testes manuais e, dependendo do projeto em que voc√™ est√°, pode acabar lidando com automa√ß√£o ‚Äî seja para come√ßar, manter, gerenciar, etc.  

N√£o sou o melhor analista de QA, mas sou um baita engenheiro de QA e, por causa disso, adoro otimizar processos automatizando tarefas, entendendo a complexidade do c√≥digo, testando coisas novas e, adivinha s√≥... programando!  

Precisei de um tempo para refletir sobre minha carreira e decidi tentar algo novo para o meu ‚Äúportf√≥lio‚Äù. Ent√£o, fui desafiada a pegar uma API p√∫blica e test√°-la. Simples assim: *‚ÄúVoc√™ tem essa documenta√ß√£o da API no Swagger, o que voc√™ vai testar, como vai testar e, se poss√≠vel, o que vai automatizar?‚Äù*  

E foi assim que o projeto nasceu:  

---

## 1. Criando a Estrutura do Projeto

Ent√£o, eu era uma garota com um *swagger* e um sonho, certo? Errado... Como diabos o meu c√©rebro com TDAH ia come√ßar qualquer coisa sem requisitos de produto bem definidos?  

Esse foi o primeiro desafio: eu precisava parar de ser t√£o dependente de documentos de requisitos. Usei o c√≥digo (a API) como fonte da verdade.  

A documenta√ß√£o da API √©: [Petstore Swagger](https://petstore.swagger.io/) e, como voc√™ pode ver, temos muitas requisi√ß√µes que podem ser testadas diretamente na p√°gina. Al√©m disso, eles j√° disponibilizam dados de teste caso voc√™ queira validar as a√ß√µes.  

Voc√™ pode me perguntar: *‚ÄúOk, e agora? Voc√™ tem um monte de endpoints; vai verificar todos?‚Äù*  

Eu poderia, mas isso seria contraproducente e n√£o teria nenhum desafio.  

E √© por isso que precisei come√ßar a pensar de forma mais voltada ao neg√≥cio. Pense comigo: em uma pet shop real, quais seriam os cen√°rios que acontecem diariamente l√°? Seguindo os endpoints dispon√≠veis na documenta√ß√£o, imaginei estes cen√°rios:  

- O gerente recebe os filhotes/gatinhos e cria seus registros.  
- O gerente atualiza os dados desses filhotes/gatinhos (se est√£o dispon√≠veis, reservados ou vendidos).  
- O consumidor quer um pet e consulta a loja para verificar os dispon√≠veis.  
- O consumidor seleciona e compra um pet na loja (essa a√ß√£o gera um pedido).  

Com isso, ficou f√°cil criar casos de teste para cada cen√°rio, usando um ou mais endpoints e seus m√©todos para alcan√ßar o objetivo.  

---

## 2. Casos de Teste

Para esse c√©rebro com TDAH aqui, essa √© a fase ‚Äúchata‚Äù. Precisa ser feita? Sim... Mas √© chata...  

J√° que t√≠nhamos os cen√°rios e quer√≠amos automatizar um fluxo para eles, precis√°vamos dos casos de teste. E n√£o pense que s√≥ porque eu acho entediante, eu n√£o fa√ßo ou fa√ßo de qualquer jeito. Pelo contr√°rio: esses casos de teste seriam meu mapa para a automa√ß√£o depois.  

Veja, voc√™ pode escrever milhares de casos de teste e investir em planos e ciclos de teste, mas ser√° uma perda de tempo se esses casos n√£o forem √∫teis ou se j√° estiverem descritos em um documento de requisitos.  

Eles podem acabar sendo contraproducentes ou in√∫teis em certas situa√ß√µes, como:  

- Testando requisitos que n√£o s√£o de produto  
- Requisitos que mudam constantemente  
- C√≥digo que j√° est√° obsoleto ou em refatora√ß√£o  
- UI simples sem l√≥gica de neg√≥cio  
- Comportamento n√£o determin√≠stico ou imprevis√≠vel  

Precisamos garantir que nossos testes estejam relacionados √† l√≥gica de neg√≥cio e ao fluxo.  
E n√£o se engane achando que testes simples n√£o t√™m valor s√≥ porque s√£o: simples.  
Se eles cumprem o que precisam cumprir, n√£o h√° necessidade de complicar.  

---

## 3. Iniciando a Automa√ß√£o

Depois de criar toda a documenta√ß√£o de testes (casos de teste, dados de teste e bl√°-bl√°-bl√°), o foco foi escolher um framework para automatiz√°-los.  
Eu estava livre para escolher qualquer ferramenta que quisesse, mas, como eu sabia que as pessoas que me pediram isso trabalhavam com **Cypress üôÇ**, a escolha l√≥gica foi **Cypress üòã**.  

Para come√ßar a automa√ß√£o do zero, eu precisava decidir quais resultados seriam relevantes para quem iria receber. Veja, n√£o era s√≥ sobre o meu ego aqui, mas tamb√©m sobre o que realmente precisamos evitar: **overengineering, sobrecarga de trabalho e sensa√ß√£o de estar sobrecarregado**.  
Usei a ferramenta **GitHub Project** para anotar como eu planejava as coisas, o que me ajudou muito, porque consegui manter tudo sob controle e documentado.  

### Minha lista de tarefas para automa√ß√£o foi:

- Instalar o framework (Cypress)  
- Criar um pipeline com **cron di√°rio** (por exemplo, um *sanity check* em produ√ß√£o; se fosse uma empresa de sistema de sa√∫de, seria importante manter os testes rodando diariamente).  
  (E tamb√©m mostrar que eu sei lidar com arquivos YAML e CI/CD ü§ì, mesmo sem me pedirem isso‚Ä¶ Mas sou proativa).  
- Criar um relat√≥rio (admito, eu queria adicionar o **Allure** aqui, mas fiquei com pregui√ßa e usei s√≥ o log bruto do pipeline).  
  > N√£o fa√ßam como eu üòÖ. Ter um relat√≥rio e/ou dashboard com resultados, status e feedback dos testes √© importante quando se est√° come√ßando um projeto de automa√ß√£o do zero ao sucesso.  
- Um *nice-to-have*: webhooks que integrem com **Teams, Slack ou qualquer outro**, para compartilhar o relat√≥rio em todos os canais.  

Com tudo isso, a melhor parte para mim estava a caminho: **codar**.  

Para testes de backend, geralmente escrevo como se fosse ser testado manualmente, assim conseguimos uma abordagem mais detalhada.  
E eu **ODEIO a sintaxe Gherkin**. Acho que n√£o precisamos de *given, when, then* para testes de backend. Evitem trabalho desnecess√°rio, pessoal.  

---

## 3.1 Payload e Reuso

Gosto de usar n√∫meros aleat√≥rios para novos dados (vamos evitar *magic numbers* em uma atualiza√ß√£o de API p√∫blica, certo?), ent√£o criei um comando para gerar um c√≥digo aleat√≥rio e um nome aleat√≥rio.  

(Voc√™ precisa verificar no Swagger qual √© o tipo de dado, quantos caracteres o usu√°rio pode usar e coisas do tipo...)  

O **Payload** √© uma vari√°vel, ent√£o ele tamb√©m pode ser reutilizado.  
Se o schema mudar e precisarmos adicionar mais chaves e valores ou remov√™-los, √© pr√°tico fazer isso.  

---

## 3.2 Valida√ß√µes

E para a **asser√ß√£o** desse comando, eu fiz assim... Como tentei manter tudo simples e a API do Petstore n√£o me d√° muitos detalhes, fiz apenas uma verifica√ß√£o b√°sica do **schema** e da requisi√ß√£o.  
Limpo, simples e eficaz.  

---

## 4. Finalmente: Documenta√ß√£o

Lembre-se: o trabalho do projeto pode ser √≥bvio para voc√™, mas nunca sabemos quem vai avali√°-lo ou se outras pessoas v√£o us√°-lo ou precisar mant√™-lo. Ent√£o, uma boa documenta√ß√£o √© essencial para evitar mal-entendidos.  

Gosto de pensar que meus passos e meu conhecimento possam ser entendidos e reproduzidos tanto por uma crian√ßa de 7 anos quanto por um av√¥ de 90.  

Se √© muito dif√≠cil para voc√™ explicar, ent√£o n√£o est√° bom.  
Eu gosto de manter o princ√≠pio **KISS** em todo c√≥digo em que trabalho...  

---

## Conclus√£o

Muitos detalhes e muito texto, eu sei, mas n√£o quis pedir para o chatgpt ler minha mente e escrever isso para mim.  
Ent√£o este texto √© **100% humano**, e mostra mais ou menos como meu c√©rebro funciona.  

Espero que possa te ajudar tamb√©m.  

**Obrigada por ler! Tenha um √≥timo dia!** ‚ú®  

---
